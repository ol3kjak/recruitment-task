{"version":3,"sources":["movies-component/MoviesComponent.tsx","search-movie-component/SearchMovieComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MoviesComponent","Title","Poster","Year","Key","className","src","alt","SearchMovieComponent","useState","submitSearch","setSubmitSearch","moviesData","setMoviesData","searchValueRef","useRef","useEffect","current","value","axios","get","then","response","data","type","name","placeholder","ref","autoFocus","onKeyDown","event","key","onClick","Response","Error","Search","map","element","index","imdbID","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qNASaA,EAAuC,SAAC,GAAiD,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,OAAQC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,IACvE,OACI,sBAAKC,UAAU,cAAf,UACI,qBACIC,IAAgB,QAAXJ,EAAmBA,EAAS,kCACjCK,IAAgB,QAAXL,EAAA,qBAAiCD,GAAjC,qBAAyDA,EAAzD,oBAET,4BAAIA,IACJ,uCAAUE,OANoBC,I,iBCQ7BI,EAAuB,WAAO,IAAD,EACEC,oBAAkB,GADpB,mBAC/BC,EAD+B,KACjBC,EADiB,OAEFF,qBAFE,mBAE/BG,EAF+B,KAEnBC,EAFmB,KAGhCC,EAAiBC,iBAAyB,MAUhD,OARAC,qBAAU,WAAO,IAAD,EACuB,GAAnC,UAAIF,EAAeG,eAAnB,aAAI,EAAwBC,QACxBC,IAAMC,IAAN,+CAAwCN,EAAeG,eAAvD,aAAwC,EAAwBC,MAAhE,qBACKG,MAAK,SAAAC,GAAQ,OAAIT,EAAcS,EAASC,WAGlD,CAACb,IAGA,qCACI,sBAAKL,UAAU,mBAAf,UACI,uBACImB,KAAK,OACLC,KAAK,aACLC,YAAa,cACbC,IAAKb,EACLc,WAAW,EACXC,UAAW,SAAAC,GAAK,MAAkB,UAAdA,EAAMC,IAAkBpB,GAAiBD,GAAgB,QAEjF,wBACIL,UAAU,gBACV2B,QAAS,kBAAMrB,GAAiBD,IAFpC,uBAMsB,WAAf,OAAVE,QAAU,IAAVA,OAAA,EAAAA,EAAYqB,UACT,qBAAK5B,UAAU,cAAf,SACI,mCAAIO,QAAJ,IAAIA,OAAJ,EAAIA,EAAYsB,UAFvB,OAKGtB,QALH,IAKGA,OALH,EAKGA,EAAYuB,OAAOC,KAAI,SAACC,EAA0BC,GAA3B,OACnB,qBAAKjC,UAAU,uBAAf,SACI,cAAC,EAAD,CACiBD,IAAKiC,EAAQE,OACbtC,MAAOoC,EAAQpC,MACfC,OAAQmC,EAAQnC,OAChBC,KAAMkC,EAAQlC,MAJTmC,Y,MC5C/BE,MARf,WACI,OACI,qBAAKnC,UAAU,MAAf,SACI,cAAC,EAAD,OCOGoC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f1aaaa79.chunk.js","sourcesContent":["import {FC} from \"react\";\n\ntype MoviesDataTypes = {\n    Poster: string;\n    Title: string;\n    Year: string;\n    Key: string;\n}\n\nexport const MoviesComponent: FC<MoviesDataTypes> = ({Title, Poster, Year, Key}: MoviesDataTypes) => {\n    return (\n        <div className=\"movie-block\" key={Key}>\n            <img\n                src={Poster !== 'N/A' ? Poster : 'https://via.placeholder.com/200'}\n                alt={Poster !== 'N/A' ? `Poster for ${Title}` : `Poster for ${Title} not available`}\n            />\n            <p>{Title}</p>\n            <p>YEAR: {Year}</p>\n        </div>\n    )\n}\n","import {useEffect, useRef, useState} from \"react\";\nimport {MoviesComponent} from \"../movies-component/MoviesComponent\";\nimport axios from 'axios';\n\ntype MoviesDataTypes = {\n    Poster: string;\n    Title: string;\n    Type: string;\n    Year: string;\n    imdbID: string;\n}\n\ninterface IApiResponseType extends MoviesDataTypes {\n    Response: string;\n    Search: Array<MoviesDataTypes>;\n    totalResults: string;\n    Error: string;\n}\n\nexport const SearchMovieComponent = () => {\n    const [submitSearch, setSubmitSearch] = useState<boolean>(false)\n    const [moviesData, setMoviesData] = useState<IApiResponseType>();\n    const searchValueRef = useRef<HTMLInputElement>(null);\n\n    useEffect(() => {\n        if (searchValueRef.current?.value) {\n            axios.get(`https://www.omdbapi.com/?s=${searchValueRef.current?.value}&apikey=6185b8e5`)\n                .then(response => setMoviesData(response.data)\n                )\n        }\n    }, [submitSearch])\n\n    return (\n        <>\n            <div className='search-component'>\n                <input\n                    type=\"text\"\n                    name=\"search_for\"\n                    placeholder={'Search for?'}\n                    ref={searchValueRef}\n                    autoFocus={true}\n                    onKeyDown={event => event.key === 'Enter' ? setSubmitSearch(!submitSearch) : null }\n                />\n                <button\n                    className=\"button-margin\"\n                    onClick={() => setSubmitSearch(!submitSearch)}\n                >Szukaj\n                </button>\n            </div>\n            {moviesData?.Response === 'False' ?\n                <div className='error_block'>\n                    <p>{moviesData?.Error}</p>\n                </div>\n                :\n                moviesData?.Search.map((element: MoviesDataTypes, index: number) => (\n                    <div className=\"container-for-movies\">\n                        <MoviesComponent key={index}\n                                         Key={element.imdbID}\n                                         Title={element.Title}\n                                         Poster={element.Poster}\n                                         Year={element.Year}\n                        />\n                    </div>\n                ))\n            }\n        </>\n    )\n}\n","import React from 'react';\nimport {SearchMovieComponent} from './search-movie-component/SearchMovieComponent';\nimport './App.css';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <SearchMovieComponent/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}